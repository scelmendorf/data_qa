---
title: "3. Duplicated data"
---

Sometimes duplicate data are expected, but duplicate data can also occur due to transcription errors or mislabeled samples. Use your knowledge of the sampling design to inform what duplicates you expect!

Load packages.

```{r load packages, message=FALSE, warning=FALSE}
library(tidyverse) # general data wrangling
library(summarytools) # counts complete duplicates
library(janitor) # finds user defined duplicates
```

If you have already completed the [Scrambled data types](data_types.qmd) module you will have created this file. For those who prefer to jump in at the middle, the original dataset with mis-entered dates and missing value codes FIXED can be downloaded [here](http://nwt.colorado.edu/tutorial_example_data/sunflower_data_1.csv) and tucked into your example_data directory.

```{r read data}
df <- read.csv(file.path("example_data", "sunflower_data_1.csv"))
```

The [summarytools](https://htmlpreview.github.io/?https://github.com/dcomtois/summarytools/blob/master/doc/introduction.html) package introduced in the [Missing data](missing_data.qmd) module includes information on the number of complete duplicates (rows with all values identical) in our dataset. We can also get this information from one line of code.

```{r ct duplicates, eval = TRUE}
sum(duplicated(df))
```

But what if we understood that each hybrid was only planted once per year? We might then want the count of instances where combinations of year and hybrid are duplicated.

```{r ct duplicates by hybrid year, eval = TRUE}
sum(duplicated(df %>%
  select(year, hybrid)))
```

Note that the `duplicated` functions considers anything after the first instance to be a duplicate, some of these may be triplicates or quadriplicates!! So a count of 4 here might mean one combination that exists 5 times, or 4 pairs, or one triplicate and one duplicate.

For more advanced duplicate sleuthing, check out the [janitor](https://cran.r-project.org/web/packages/janitor/vignettes/janitor.html) package. The `get_dupes` function returns the rows that are duplicated and inserts a count of the duplicates. This suite of functions can be very helpful in sussing out why duplicates are occurring and what to do with them.

```{r dupes}
these_dupes <- get_dupes(df, year, hybrid)
```

```{r view dupes, eval = FALSE}
View(these_dupes)
```

```{r display ct, echo = FALSE}
knitr::kable(these_dupes, digits = 2)
```

Getting rid of exact duplicates (for example if you find you entered the same data twice) is very easy using the `distinct` function. In this case, this won't accomplish anything because our data are not exact duplicates.

```{r de-dupe}
df <- df %>%
  distinct()
```

Records that are partial duplicates (such as the example above) often require going back to the original paper datasheets to check which record is correct. Perhaps one of the rows above was actually a different year, for example. In other cases, re-reading the protocol to understand the replication structure may illuminate why these 'apparent' duplicates exist and the statistical analysis can be adjusted accordingly.
