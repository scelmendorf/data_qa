[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "data_types.html",
    "href": "data_types.html",
    "title": "1. Scrambled data types",
    "section": "",
    "text": "Load packages\n\nlibrary (datacleanr) # for interactive data viz\nlibrary(naniar) # to homogenize missing value codes\nlibrary (tidyverse) #general data wrangling\nlibrary (dplyr) #general data wrangling\n\n\ndf <-read.csv ('example_data/sunflower_data_broken.csv')\n\nTo understand a little bit about the data, it can be helpful to get a brief summary of the contents\n\ndplyr::glimpse(df)\n\nRows: 2,685\nColumns: 8\n$ X                    <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15…\n$ harvest_date         <int> 19970930, 19970930, 19970930, 19970930, 19970930,…\n$ harvest_moisture_pct <dbl> 8.4, 9.9, 11.0, 10.0, 10.3, 9.7, 9.7, 8.1, 9.5, 9…\n$ height_in            <chr> \"57\", \"62\", \"56\", \"60\", \"58\", \"58\", \"66\", \"60\", \"…\n$ planting_date        <chr> \"19970529\", \"19970529\", \"19970529\", \"19970529\", \"…\n$ yield_lb_acre        <dbl> 2542, 2179, 2510, 2225, 2208, 2326, 2319, 2224, 2…\n$ Year                 <int> 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1…\n$ Hybrid               <chr> \"AP2098\", \"AP3470\", \"AK7304\", \"AK7305\", \"AK7306\",…\n\n\nA glimpse at our dataset tells us something about its structure. Ideally, you are the data collector and already know all of this. The first column (X) appears to be an index variable. Sometimes this is intentional; more often it occurs when people write out files in R and forget to include the row.names = F argument. Some things should strike you as potentially problematic about this dataset:\n\nThere are two date fields, but one is encoded as a character and one as an integer.\nHeight (with units inches) is encoded as a character.\n\nIt is very easy to convert everything that should be numeric into a numeric field, but at the risk of wiping out actual data. Better is to suss out what those mystery values are, and why they are there in the first place.\n\nsource('functions/functions.R')\n#define numeric columns\nnon_numeric_cols <-'Hybrid'\nnumeric_cols <- setdiff(names(df), non_numeric_cols)\n\n#set up a list to put numeric check results into\nall_checks <- list()\n\nfor (i in numeric_cols) {\n  all_checks[[i]] <- check_non_numeric(df, i)\n}\n\nall values are numeric for  X \nall values are numeric for  harvest_date \nall values are numeric for  harvest_moisture_pct \n\n\nWarning in check_non_numeric(df, i): Check file for height_in \n\n\nWarning in check_non_numeric(df, i): Check file for planting_date \n\n\nall values are numeric for  yield_lb_acre \nall values are numeric for  Year \n\n# resulting list will just have the things you still need to check\nnames(all_checks)\n\n[1] \"height_in\"     \"planting_date\"\n\n\n\nView(all_checks[[\"height_in\"]])\n\n\n\n\n\n \n  \n      \n    X \n    harvest_date \n    harvest_moisture_pct \n    height_in \n    planting_date \n    yield_lb_acre \n    Year \n    Hybrid \n  \n \n\n  \n    40 \n    40 \n    19970930 \n    9.5 \n    na \n    19970529 \n    2381 \n    1997 \n    ST2117 \n  \n  \n    475 \n    475 \n    20021031 \n    13.3 \n    N/A \n    20020529 \n    2008 \n    2002 \n    F00001 \n  \n\n\n\n\n\nWe can see from the above there are two different missing value codes included in the height column. Having confidence in the issues, we can now set those to a proper missing value code. Here I’m going to run on the assumption that these two missing value codes may be found elsewhere, and replace them everywhere\n\n#replace non-standard missing value codes\ndf <- df %>% replace_with_na_all(\n  condition =\n    ~ .x %in% c(\"N/A\", \"na\")\n)\n\n\n# resulting list will just have the things you still need to check\nnames(all_checks)\n\n[1] \"height_in\"     \"planting_date\"\n\n\n\nView(all_checks[[\"planting_date\"]])\n\n\n\n\n\n \n  \n      \n    X \n    harvest_date \n    harvest_moisture_pct \n    height_in \n    planting_date \n    yield_lb_acre \n    Year \n    Hybrid \n  \n \n\n  \n    867 \n    867 \n    20101021 \n    11.7 \n    63 \n    5/20/2010 \n    1032 \n    2010 \n    F30008NS,CL \n  \n  \n    868 \n    868 \n    20101021 \n    8.2 \n    64 \n    5/20/2010 \n    1244 \n    2010 \n    F51122NS,CL \n  \n  \n    869 \n    869 \n    20101021 \n    8.6 \n    66 \n    5/20/2010 \n    1290 \n    2010 \n    F51137NS,CL \n  \n  \n    870 \n    870 \n    20101021 \n    9.4 \n    71 \n    5/20/2010 \n    1354 \n    2010 \n    F51139NS,DM,CL \n  \n  \n    871 \n    871 \n    20101021 \n    11.0 \n    67 \n    5/20/2010 \n    1236 \n    2010 \n    F51313NS,DM,CL \n  \n  \n    872 \n    872 \n    20101021 \n    9.3 \n    64 \n    5/20/2010 \n    664 \n    2010 \n    F89036NS,DM,CL \n  \n  \n    873 \n    873 \n    20101021 \n    10.0 \n    69 \n    5/20/2010 \n    230 \n    2010 \n    F89057NS,SU \n  \n  \n    874 \n    874 \n    20101021 \n    8.4 \n    58 \n    5/20/2010 \n    1153 \n    2010 \n    F91033NS,SU \n  \n  \n    875 \n    875 \n    20101021 \n    9.9 \n    65 \n    5/20/2010 \n    759 \n    2010 \n    306 DMR NS \n  \n  \n    876 \n    876 \n    20101021 \n    8.5 \n    62 \n    5/20/2010 \n    1592 \n    2010 \n    3080 DMR NS \n  \n\n\n\n\n\nIt appears that some of the data have dates encoded as an 8 digit integer YYYYMMDD while others have M/D/YYYY. With this information, we can standardize the dates two ways, and then consolidate into a single, proper date column\n\ndf <- df %>%\n  rename(planting_date_original = planting_date) %>%\n  mutate(yyyymmdd= lubridate::ymd(planting_date_original),\n         mdy = lubridate::mdy(planting_date_original),\n         planting_date_corrected = coalesce(yyyymmdd, mdy))\n\nWarning: There were 2 warnings in `mutate()`.\nThe first warning was:\nℹ In argument: `yyyymmdd = lubridate::ymd(planting_date_original)`.\nCaused by warning:\n!  145 failed to parse.\nℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning.\n\n#always check your work\nsanity_test <- df %>% \n  filter(Year %in% c(2008:2012)) %>%\n  select(planting_date_original, planting_date_corrected) %>%\n  distinct()\n\nAlways check your work!!\n\n\n\n\n \n  \n    planting_date_original \n    planting_date_corrected \n  \n \n\n  \n    20090527 \n    2009-05-27 \n  \n  \n    5/20/2010 \n    2010-05-20 \n  \n  \n    20120606 \n    2012-06-06 \n  \n  \n    NA \n    NA \n  \n\n\n\n\n\nFinally, we can remove the temporary columns we created, and set all our remaining columns to the correct column types\n\n\nRows: 2,685\nColumns: 8\n$ x                    <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15…\n$ harvest_date         <date> 1997-09-30, 1997-09-30, 1997-09-30, 1997-09-30, …\n$ harvest_moisture_pct <dbl> 8.4, 9.9, 11.0, 10.0, 10.3, 9.7, 9.7, 8.1, 9.5, 9…\n$ height_in            <dbl> 57, 62, 56, 60, 58, 58, 66, 60, 60, 54, 54, 62, 5…\n$ yield_lb_acre        <dbl> 2542, 2179, 2510, 2225, 2208, 2326, 2319, 2224, 2…\n$ year                 <int> 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1…\n$ hybrid               <chr> \"AP2098\", \"AP3470\", \"AK7304\", \"AK7305\", \"AK7306\",…\n$ planting_date        <date> 1997-05-29, 1997-05-29, 1997-05-29, 1997-05-29, …"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "5 simple rules for quality controlling your data",
    "section": "",
    "text": "Strings mixed with numbers and dates\nMissing data\nDuplicate data\nData in range\nSpelling (unfortunately) counts\nGeocoordinates\nTime zones\nLogic checks\nData vis for quality control - generic\nData vis for quality control - customized"
  },
  {
    "objectID": "missing.html",
    "href": "missing.html",
    "title": "Do I have strings intermixed with numbers and dates?",
    "section": "",
    "text": "Load packages\n\nlibrary (datacleanr) # for interactive data viz\nlibrary(naniar) # to homogenize missing value codes\nlibrary (tidyverse) #general data wrangling\nlibrary (dplyr) #general data wrangling\n\n\ndf <-read.csv ('example_data/sunflower_data_broken.csv')\n\nTo understand a little bit about the data, it can be helpful to get a brief summary of the contents\n\ndplyr::glimpse(df)\n\nRows: 2,756\nColumns: 8\n$ X                    <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15…\n$ harvest_date         <int> 19970930, 19970930, 19970930, 19970930, 19970930,…\n$ harvest_moisture_pct <dbl> 8.4, 9.9, 11.0, 10.0, 10.3, 9.7, 9.7, 8.1, 9.5, 9…\n$ height_in            <chr> \"57\", \"62\", \"56\", \"60\", \"58\", \"58\", \"66\", \"60\", \"…\n$ planting_date        <chr> \"19970529\", \"19970529\", \"19970529\", \"19970529\", \"…\n$ yield_lb_acre        <dbl> 2542, 2179, 2510, 2225, 2208, 2326, 2319, 2224, 2…\n$ Year                 <int> 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1…\n$ Hybrid               <chr> \"AP2098\", \"AP3470\", \"AK7304\", \"AK7305\", \"AK7306\",…\n\n\nA glimpse at our dataset tells us something about its structure. Ideally, you are the data collector and already know all of this. The first column (X) appears to be an index variable. Sometimes this is intentional; more often it occurs when people write out files in R and forget to include the row.names = F argument. Some things should strike you as potentially problematic about this dataset:\n\nThere are two date fields, but one is encoded as a character and one as an integer.\nHeight (with units inches) is encoded as a character.\n\nIt is very easy to convert everything that should be numeric into a numeric field, but at the risk of wiping out actual data. Better is to suss out what those mystery values are, and why they are there in the first place.\n\nsource('functions/functions.R')\n#define numeric columns\nnon_numeric_cols <-'Hybrid'\nnumeric_cols <- setdiff(names(df), non_numeric_cols)\n\n#set up a list to put numeric check results into\nall_checks <- list()\n\nfor (i in numeric_cols) {\n  all_checks[[i]] <- check_non_numeric(df, i)\n}\n\nall values are numeric for  X \nall values are numeric for  harvest_date \nall values are numeric for  harvest_moisture_pct \n\n\nWarning in check_non_numeric(df, i): Check file for height_in \n\n\nWarning in check_non_numeric(df, i): Check file for planting_date \n\n\nall values are numeric for  yield_lb_acre \nall values are numeric for  Year \n\n# resulting list will just have the things you still need to check\nnames(all_checks)\n\n[1] \"height_in\"     \"planting_date\"\n\n\n\nView(all_checks[[\"height_in\"]])\n\n\n\n\n\n \n  \n      \n    X \n    harvest_date \n    harvest_moisture_pct \n    height_in \n    planting_date \n    yield_lb_acre \n    Year \n    Hybrid \n  \n \n\n  \n    40 \n    40 \n    19970930 \n    9.5 \n    na \n    19970529 \n    2381 \n    1997 \n    ST2117 \n  \n  \n    475 \n    475 \n    20021031 \n    13.3 \n    N/A \n    20020529 \n    2008 \n    2002 \n    F00001 \n  \n\n\n\n\n\nWe can see from the above there are two different missing value codes included in the height column. Having confidence in the issues, we can now set those to a proper missing value code. Here I’m going to run on the assumption that these two missing value codes may be found elsewhere, and replace them everywhere\n\n#replace non-standard missing value codes\ndf <- df %>% replace_with_na_all(\n  condition =\n    ~ .x %in% c(\"N/A\", \"na\")\n)\n\n\n# resulting list will just have the things you still need to check\nnames(all_checks)\n\n[1] \"height_in\"     \"planting_date\"\n\n\n\nView(all_checks[[\"planting_date\"]])\n\n\n\n\n\n \n  \n      \n    X \n    harvest_date \n    harvest_moisture_pct \n    height_in \n    planting_date \n    yield_lb_acre \n    Year \n    Hybrid \n  \n \n\n  \n    938 \n    938 \n    20101021 \n    11.7 \n    63 \n    5/20/2010 \n    1032 \n    2010 \n    F30008NS,CL \n  \n  \n    939 \n    939 \n    20101021 \n    8.2 \n    64 \n    5/20/2010 \n    1244 \n    2010 \n    F51122NS,CL \n  \n  \n    940 \n    940 \n    20101021 \n    8.6 \n    66 \n    5/20/2010 \n    1290 \n    2010 \n    F51137NS,CL \n  \n  \n    941 \n    941 \n    20101021 \n    9.4 \n    71 \n    5/20/2010 \n    1354 \n    2010 \n    F51139NS,DM,CL \n  \n  \n    942 \n    942 \n    20101021 \n    11.0 \n    67 \n    5/20/2010 \n    1236 \n    2010 \n    F51313NS,DM,CL \n  \n  \n    943 \n    943 \n    20101021 \n    9.3 \n    64 \n    5/20/2010 \n    664 \n    2010 \n    F89036NS,DM,CL \n  \n  \n    944 \n    944 \n    20101021 \n    10.0 \n    69 \n    5/20/2010 \n    230 \n    2010 \n    F89057NS,SU \n  \n  \n    945 \n    945 \n    20101021 \n    8.4 \n    58 \n    5/20/2010 \n    1153 \n    2010 \n    F91033NS,SU \n  \n  \n    946 \n    946 \n    20101021 \n    9.9 \n    65 \n    5/20/2010 \n    759 \n    2010 \n    306 DMR NS \n  \n  \n    947 \n    947 \n    20101021 \n    8.5 \n    62 \n    5/20/2010 \n    1592 \n    2010 \n    3080 DMR NS \n  \n  \n    948 \n    948 \n    20101021 \n    8.7 \n    66 \n    5/20/2010 \n    1860 \n    2010 \n    356A NS \n  \n  \n    949 \n    949 \n    20101021 \n    10.5 \n    70 \n    5/20/2010 \n    1221 \n    2010 \n    378 DMR HO \n  \n  \n    950 \n    950 \n    20101021 \n    9.5 \n    70 \n    5/20/2010 \n    796 \n    2010 \n    460 E, NS \n  \n  \n    951 \n    951 \n    20101021 \n    9.9 \n    70 \n    5/20/2010 \n    1444 \n    2010 \n    555 CL DMR NS \n  \n  \n    952 \n    952 \n    20101021 \n    12.8 \n    65 \n    5/20/2010 \n    951 \n    2010 \n    559 CL DMR NS \n  \n  \n    953 \n    953 \n    20101021 \n    9.0 \n    63 \n    5/20/2010 \n    945 \n    2010 \n    564 CL NS \n  \n  \n    954 \n    954 \n    20101021 \n    12.3 \n    75 \n    5/20/2010 \n    1043 \n    2010 \n    6007 \n  \n  \n    955 \n    955 \n    20101021 \n    8.8 \n    71 \n    5/20/2010 \n    288 \n    2010 \n    7052 \n  \n  \n    956 \n    956 \n    20101021 \n    9.2 \n    67 \n    5/20/2010 \n    1172 \n    2010 \n    7163 \n  \n  \n    957 \n    957 \n    20101021 \n    8.5 \n    69 \n    5/20/2010 \n    785 \n    2010 \n    8037 \n  \n  \n    958 \n    958 \n    20101021 \n    8.7 \n    67 \n    5/20/2010 \n    439 \n    2010 \n    8064 \n  \n  \n    959 \n    959 \n    20101021 \n    9.1 \n    60 \n    5/20/2010 \n    1222 \n    2010 \n    724 NSCL \n  \n  \n    960 \n    960 \n    20101021 \n    8.9 \n    57 \n    5/20/2010 \n    849 \n    2010 \n    735 NSCLDM \n  \n  \n    961 \n    961 \n    20101021 \n    8.1 \n    70 \n    5/20/2010 \n    1340 \n    2010 \n    IX10-10576 \n  \n  \n    962 \n    962 \n    20101021 \n    10.1 \n    67 \n    5/20/2010 \n    1217 \n    2010 \n    IX10-94 NSSU \n  \n  \n    963 \n    963 \n    20101021 \n    10.6 \n    65 \n    5/20/2010 \n    330 \n    2010 \n    IX10-96 NSSU \n  \n  \n    964 \n    964 \n    20101021 \n    11.4 \n    70 \n    5/20/2010 \n    1140 \n    2010 \n    IX10-98 NSSU \n  \n  \n    965 \n    965 \n    20101021 \n    13.9 \n    62 \n    5/20/2010 \n    736 \n    2010 \n    8D310 \n  \n  \n    966 \n    966 \n    20101021 \n    10.6 \n    58 \n    5/20/2010 \n    991 \n    2010 \n    8D481 \n  \n  \n    967 \n    967 \n    20101021 \n    8.4 \n    63 \n    5/20/2010 \n    1397 \n    2010 \n    8H288CLDM \n  \n  \n    968 \n    968 \n    20101021 \n    8.9 \n    57 \n    5/20/2010 \n    1176 \n    2010 \n    8H449DM \n  \n  \n    969 \n    969 \n    20101021 \n    8.7 \n    64 \n    5/20/2010 \n    1188 \n    2010 \n    8N270CLDM \n  \n  \n    970 \n    970 \n    20101021 \n    9.0 \n    61 \n    5/20/2010 \n    1258 \n    2010 \n    8N358CLDM \n  \n  \n    971 \n    971 \n    20101021 \n    9.2 \n    61 \n    5/20/2010 \n    1236 \n    2010 \n    8N433DM \n  \n  \n    972 \n    972 \n    20101021 \n    13.5 \n    68 \n    5/20/2010 \n    1077 \n    2010 \n    LN9692 \n  \n  \n    973 \n    973 \n    20101021 \n    12.9 \n    72 \n    5/20/2010 \n    799 \n    2010 \n    LN9714 \n  \n  \n    974 \n    974 \n    20101021 \n    9.1 \n    66 \n    5/20/2010 \n    1353 \n    2010 \n    LN9987 \n  \n  \n    975 \n    975 \n    20101021 \n    12.6 \n    67 \n    5/20/2010 \n    816 \n    2010 \n    MN12138 \n  \n  \n    976 \n    976 \n    20101021 \n    11.6 \n    70 \n    5/20/2010 \n    1287 \n    2010 \n    PAN 7813NS \n  \n  \n    977 \n    977 \n    20101021 \n    12.5 \n    67 \n    5/20/2010 \n    1199 \n    2010 \n    PAN 7924NS \n  \n  \n    978 \n    978 \n    20101021 \n    10.8 \n    69 \n    5/20/2010 \n    1173 \n    2010 \n    PAN 8466 NSCL \n  \n  \n    979 \n    979 \n    20101021 \n    10.5 \n    63 \n    5/20/2010 \n    1445 \n    2010 \n    PEX 7404 \n  \n  \n    980 \n    980 \n    20101021 \n    9.2 \n    60 \n    5/20/2010 \n    1146 \n    2010 \n    PEX 7803 \n  \n  \n    981 \n    981 \n    20101021 \n    12.5 \n    64 \n    5/20/2010 \n    1523 \n    2010 \n    PEX 7904 \n  \n  \n    982 \n    982 \n    20101021 \n    10.5 \n    65 \n    5/20/2010 \n    673 \n    2010 \n    63N82 \n  \n  \n    983 \n    983 \n    20101021 \n    10.7 \n    61 \n    5/20/2010 \n    976 \n    2010 \n    P63ME70 \n  \n  \n    984 \n    984 \n    20101021 \n    11.3 \n    65 \n    5/20/2010 \n    520 \n    2010 \n    P64HE01 \n  \n  \n    985 \n    985 \n    20101021 \n    13.9 \n    66 \n    5/20/2010 \n    1137 \n    2010 \n    CL 7001 \n  \n  \n    986 \n    986 \n    20101021 \n    12.4 \n    62 \n    5/20/2010 \n    1149 \n    2010 \n    CL 9001 \n  \n  \n    987 \n    987 \n    20101021 \n    10.8 \n    66 \n    5/20/2010 \n    906 \n    2010 \n    E-4 \n  \n  \n    988 \n    988 \n    20101021 \n    10.8 \n    71 \n    5/20/2010 \n    814 \n    2010 \n    E-5 \n  \n  \n    989 \n    989 \n    20101021 \n    12.7 \n    72 \n    5/20/2010 \n    507 \n    2010 \n    E-8 \n  \n  \n    990 \n    990 \n    20101021 \n    12.8 \n    69 \n    5/20/2010 \n    913 \n    2010 \n    E-85 \n  \n  \n    991 \n    991 \n    20101021 \n    8.2 \n    58 \n    5/20/2010 \n    1212 \n    2010 \n    Badger CL \n  \n  \n    992 \n    992 \n    20101021 \n    8.8 \n    62 \n    5/20/2010 \n    1097 \n    2010 \n    Blazer CL \n  \n  \n    993 \n    993 \n    20101021 \n    8.6 \n    65 \n    5/20/2010 \n    908 \n    2010 \n    Cobra \n  \n  \n    994 \n    994 \n    20101021 \n    8.6 \n    63 \n    5/20/2010 \n    1177 \n    2010 \n    Firebird \n  \n  \n    995 \n    995 \n    20101021 \n    8.8 \n    59 \n    5/20/2010 \n    745 \n    2010 \n    X9464 \n  \n  \n    996 \n    996 \n    20101021 \n    8.3 \n    56 \n    5/20/2010 \n    840 \n    2010 \n    X9828 \n  \n  \n    997 \n    997 \n    20101021 \n    12.5 \n    70 \n    5/20/2010 \n    1422 \n    2010 \n    X9866 \n  \n  \n    998 \n    998 \n    20101021 \n    8.9 \n    61 \n    5/20/2010 \n    906 \n    2010 \n    3433 NS/DM \n  \n  \n    999 \n    999 \n    20101021 \n    9.1 \n    58 \n    5/20/2010 \n    982 \n    2010 \n    3480 NS/CL/DM \n  \n  \n    1000 \n    1000 \n    20101021 \n    10.2 \n    63 \n    5/20/2010 \n    1794 \n    2010 \n    3732 NS \n  \n  \n    1001 \n    1001 \n    20101021 \n    8.5 \n    58 \n    5/20/2010 \n    1623 \n    2010 \n    3845 HO \n  \n  \n    1002 \n    1002 \n    20101021 \n    8.4 \n    68 \n    5/20/2010 \n    1854 \n    2010 \n    3875 NS \n  \n  \n    1003 \n    1003 \n    20101021 \n    10.6 \n    66 \n    5/20/2010 \n    1031 \n    2010 \n    3980 NS/CL \n  \n  \n    1004 \n    1004 \n    20101021 \n    10.5 \n    62 \n    5/20/2010 \n    877 \n    2010 \n    4596 HO/DM \n  \n  \n    1005 \n    1005 \n    20101021 \n    9.3 \n    59 \n    5/20/2010 \n    1042 \n    2010 \n    4651 NS/DM \n  \n  \n    1006 \n    1006 \n    20101021 \n    8.4 \n    59 \n    5/20/2010 \n    662 \n    2010 \n    7120 HO/DM \n  \n  \n    1007 \n    1007 \n    20101021 \n    9.3 \n    60 \n    5/20/2010 \n    1030 \n    2010 \n    610CLD \n  \n  \n    1008 \n    1008 \n    20101021 \n    11.5 \n    64 \n    5/20/2010 \n    1117 \n    2010 \n    810HCLD \n  \n  \n    1009 \n    1009 \n    20101021 \n    9.1 \n    48 \n    5/20/2010 \n    1513 \n    2010 \n    s671 \n  \n  \n    1010 \n    1010 \n    20101021 \n    10.0 \n    52 \n    5/20/2010 \n    1093 \n    2010 \n    s673 \n  \n  \n    1011 \n    1011 \n    20101021 \n    10.2 \n    72 \n    5/20/2010 \n    1284 \n    2010 \n    TRX7435HO \n  \n  \n    1012 \n    1012 \n    20101021 \n    9.7 \n    60 \n    5/20/2010 \n    1291 \n    2010 \n    TRX8341 \n  \n  \n    1013 \n    1013 \n    20101021 \n    8.4 \n    63 \n    5/20/2010 \n    861 \n    2010 \n    894 \n  \n\n\n\n\n\nIt appears that some of the data have dates encoded as an 8 digit integer YYYYMMDD while others have M/D/YYYY. With this information, we can standardize the dates two ways, and then consolidate into a single, proper date column\n\ndf <- df %>%\n  rename(planting_date_original = planting_date) %>%\n  mutate(yyyymmdd= lubridate::ymd(planting_date_original),\n         mdy = lubridate::mdy(planting_date_original),\n         planting_date_corrected = coalesce(yyyymmdd, mdy))\n\nWarning: There were 2 warnings in `mutate()`.\nThe first warning was:\nℹ In argument: `yyyymmdd = lubridate::ymd(planting_date_original)`.\nCaused by warning:\n!  145 failed to parse.\nℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning.\n\n#always check your work\nsanity_test <- df %>% \n  filter(Year %in% c(2008:2012)) %>%\n  select(planting_date_original, planting_date_corrected) %>%\n  distinct()\n\nAlways check your work!!\n\n\n\n\n \n  \n    planting_date_original \n    planting_date_corrected \n  \n \n\n  \n    20090527 \n    2009-05-27 \n  \n  \n    5/20/2010 \n    2010-05-20 \n  \n  \n    20120606 \n    2012-06-06 \n  \n  \n    NA \n    NA \n  \n\n\n\n\n\nFinally, we can remove the temporary columns we created, and set all our remaining columns to the correct column types\n\n\nRows: 2,756\nColumns: 8\n$ x                    <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15…\n$ harvest_date         <date> 1997-09-30, 1997-09-30, 1997-09-30, 1997-09-30, …\n$ harvest_moisture_pct <dbl> 8.4, 9.9, 11.0, 10.0, 10.3, 9.7, 9.7, 8.1, 9.5, 9…\n$ height_in            <dbl> 57, 62, 56, 60, 58, 58, 66, 60, 60, 54, 54, 62, 5…\n$ yield_lb_acre        <dbl> 2542, 2179, 2510, 2225, 2208, 2326, 2319, 2224, 2…\n$ year                 <int> 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1…\n$ hybrid               <chr> \"AP2098\", \"AP3470\", \"AK7304\", \"AK7305\", \"AK7306\",…\n$ planting_date        <date> 1997-05-29, 1997-05-29, 1997-05-29, 1997-05-29, …\n\n\nTo explore our data, we will first use the datacleanr package. This is an interactive tool that launches a shiny website for exploring your data. More in depth tutorials can be found using the author’s link above.\nThe dcr_app() command launches the interactive app.\n\n#dcr_app(df)\n\n\n# nas can read in multiple ways with vs without quotes\n# sarah add some examples of these here\ndf <- df %>% replace_with_na_all(\n  condition =\n    ~ .x %in% c(\"NA\", \"na\", \"--\", \"-\", '\\\\')\n)\n\nLaunch datacleanr’s interactive app with dcr_app(). The following examples demonstrate basic use and highlight features across the four app tabs."
  },
  {
    "objectID": "missing_data.html",
    "href": "missing_data.html",
    "title": "4. Data in range",
    "section": "",
    "text": "Load packages\n\nlibrary (tidyverse) #general data wrangling\nlibrary (summarytools)\n\nIf you have already completed module 1 you will have created this file. For those who prefer to jump in at the middle, the original dataset with mis-entered dates and missing value codes FIXED is provided here.\n\ndf <-read.csv ('example_data/sunflower_data_1.csv')\n\nThe summarytools package can give us a nice overview of our dataset, including the percent of missing values (NAs) recorded in each variable.\n\nview(dfSummary(df))\n\n\n\n\n\nData Frame Summary\ndf\nDimensions: 2685 x 9\n  Duplicates: 0\n\n\n  \n    \n      Variable\n      Stats / Values\n      Freqs (% of Valid)\n      Graph\n      Missing\n    \n  \n  \n    \n      X\n[integer]\n      Mean (sd) : 1343 (775.2)min ≤ med ≤ max:1 ≤ 1343 ≤ 2685IQR (CV) : 1342 (0.6)\n      2685 distinct values\n(Integer sequence)\n      \n      0\n(0.0%)\n    \n    \n      x\n[integer]\n      Mean (sd) : 1343 (775.2)min ≤ med ≤ max:1 ≤ 1343 ≤ 2685IQR (CV) : 1342 (0.6)\n      2685 distinct values\n(Integer sequence)\n      \n      0\n(0.0%)\n    \n    \n      harvest_date\n[character]\n      1. 1999-10-132. 2006-10-233. 2005-10-254. 1997-09-305. 1993-10-216. 1994-10-127. 2000-10-178. 2004-10-279. 2010-10-2110. 2009-11-16[ 14 others ]\n      113(6.9%)107(6.6%)105(6.4%)99(6.1%)98(6.0%)98(6.0%)90(5.5%)80(4.9%)76(4.7%)73(4.5%)692(42.4%)\n      \n      1054\n(39.3%)\n    \n    \n      harvest_moisture_pct\n[numeric]\n      Mean (sd) : 14.3 (6.1)min ≤ med ≤ max:5.8 ≤ 11.8 ≤ 43.4IQR (CV) : 7.9 (0.4)\n      413 distinct values\n      \n      656\n(24.4%)\n    \n    \n      height_in\n[numeric]\n      Mean (sd) : 62.2 (19.6)min ≤ med ≤ max:31 ≤ 60 ≤ 188IQR (CV) : 10 (0.3)\n      376 distinct values\n      \n      398\n(14.8%)\n    \n    \n      yield_lb_acre\n[numeric]\n      Mean (sd) : 1954.6 (497.5)min ≤ med ≤ max:230 ≤ 2001 ≤ 3426IQR (CV) : 641.1 (0.3)\n      1635 distinct values\n      \n      73\n(2.7%)\n    \n    \n      year\n[integer]\n      Mean (sd) : 1999.5 (11.4)min ≤ med ≤ max:1978 ≤ 1999 ≤ 2022IQR (CV) : 17 (0)\n      40 distinct values\n      \n      0\n(0.0%)\n    \n    \n      hybrid\n[character]\n      1. 8942. Falcon3. SF1874. 1415. Badger DMR6. 8D3107. Hornet8. SF2709. 3845 HO10. 432 E[ 1757 others ]\n      27(1.0%)12(0.4%)10(0.4%)9(0.3%)9(0.3%)8(0.3%)8(0.3%)8(0.3%)7(0.3%)7(0.3%)2580(96.1%)\n      \n      0\n(0.0%)\n    \n    \n      planting_date\n[character]\n      1. 1999-06-012. 2006-06-013. 1997-05-294. 1993-05-265. 1994-05-256. 2000-06-027. 2004-05-268. 2010-05-209. 2009-05-2710. 1991-05-28[ 49 others ]\n      113(7.2%)107(6.9%)99(6.3%)98(6.3%)98(6.3%)90(5.8%)80(5.1%)76(4.9%)73(4.7%)72(4.6%)656(42.0%)\n      \n      1123\n(41.8%)\n    \n  \n\nGenerated by summarytools 1.0.1 (R version 4.2.2)2023-11-09\n\n\n\nKnowing more about the intended sampling design will tell us what other missing values should we look for. For example, were data collected every year? If so examining the years included in the dataset may be important.\nSometimes a visual check is easy to spot what is missing\n\nsort (unique (df$year))\n\n [1] 1978 1979 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993\n[16] 1994 1996 1997 1998 1999 2000 2001 2002 2004 2005 2006 2007 2008 2009 2010\n[31] 2012 2013 2014 2015 2016 2017 2018 2020 2021 2022\n\n\nSometimes it’s hard to find exactly what is missing! setdiff (for simple checks for expected values based on complete sets) expand.grid (for checking pre-defined combinations) and the padr (for padding out dataset based on regular temporal frequency) are your friends here. As an example, I can use the simple code below to figure out what years are missing. It is then up to you whether it is important to add those years with NA values, or just carry on knowing they are missing.\n\nsetdiff(seq(min(df$year), max(df$year)), unique(df$year))\n\n[1] 1980 1995 2003 2011 2019\n\n\nCommonly, we expect a similar number of samples over some interval (e.g. per site or year)\n\nct_by_year = df %>%\n  group_by(year) %>%\n  tally()\n\nViewing just the first 10 years, sampling appears very uneven, is this expected?\n\n\n\n\n\nyear\nn\n\n\n\n\n1978\n26\n\n\n1979\n36\n\n\n1981\n53\n\n\n1982\n64\n\n\n1983\n69\n\n\n1984\n64\n\n\n1985\n64\n\n\n1986\n57\n\n\n1987\n64\n\n\n1988\n49"
  },
  {
    "objectID": "datacleanr.html",
    "href": "datacleanr.html",
    "title": "10. Shiny apps for data qa and data viz",
    "section": "",
    "text": "Load packages\n\nlibrary (datacleanr) # for interactive data viz\n\n\ndf <-read.csv ('example_data/sunflower_data_broken.csv')\n\nThe dcr_app() command launches the interactive app.\n\ndcr_app(df)"
  },
  {
    "objectID": "duplicate_data.html",
    "href": "duplicate_data.html",
    "title": "3. Duplicated Data",
    "section": "",
    "text": "Load packages\n\nlibrary(tidyverse) # general data wrangling\nlibrary(summarytools)\nlibrary(janitor)\n\nIf you have already completed module 1 you will have created this file. For those who prefer to jump in at the middle, the original dataset with mis-entered dates and missing value codes FIXED is provided here.\n\ndf <- read.csv(\"example_data/sunflower_data_1.csv\")\n\nThe summarytools package introduced in module 2 includes information on the number of complete duplicates (all values identical) in our dataset. We can also get this information from one line of code.\n\nsum(duplicated(df))\n\n[1] 0\n\n\nBut what if we understood that each hybrid was only planted once per year? We might then want the count of instances where combinations of year and hybrid are duplicated.\n\nsum(duplicated(df %>%\n  select(year, hybrid)))\n\n[1] 4\n\n\nNote that the duplicated functions considers anything after the first instance to be a duplicate, some of these may be triplicates or quadriplicates!! So a count of 4 here might mean one combination that exists 5 times, or 4 pairs, or one triplicate and one duplicate.\nFor more advanced duplicate sleuthing, check out the janitor package. The get_dupes function returns the rows that are duplicated and inserts a count of the duplicates. This suite of functions can be very helpful in sussing out why duplicates are occurring and what to do with them.\n\nthese_dupes <- get_dupes(df, year, hybrid)\n\n\nView(these_dupes)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nyear\nhybrid\ndupe_count\nX\nx\nharvest_date\nharvest_moisture_pct\nheight_in\nyield_lb_acre\nplanting_date\n\n\n\n\n1990\n8803\n2\n1985\n1985\nNA\n15.70\nNA\n2012.00\nNA\n\n\n1990\n8803\n2\n1986\n1986\nNA\n17.40\nNA\n1865.00\nNA\n\n\n2000\nHySun 530\n2\n343\n343\n2000-10-17\n15.60\n59.00\n1921.00\n2000-06-02\n\n\n2000\nHySun 530\n2\n379\n379\n2000-10-17\n13.30\n60.00\n2112.00\n2000-06-02\n\n\n2015\nFalcon\n2\n1097\n1097\n2015-11-03\n10.24\n56.69\n2008.90\n2015-06-03\n\n\n2015\nFalcon\n2\n1126\n1126\n2015-11-03\n10.12\n55.12\n2125.95\n2015-06-03\n\n\n2016\nFalcon\n2\n1140\n1140\n2016-11-09\n6.89\n60.04\n1522.60\n2016-05-27\n\n\n2016\nFalcon\n2\n1166\n1166\n2016-11-09\n7.71\n58.07\n1683.70\n2016-05-27"
  },
  {
    "objectID": "data_in_range.html",
    "href": "data_in_range.html",
    "title": "4. Data in range",
    "section": "",
    "text": "Load packages\n\nlibrary (tidyverse) #general data wrangling\nlibrary (summarytools)\n\nIf you have already completed module 1 you will have created this file. For those who prefer to jump in at the middle, the original dataset with mis-entered dates and missing value codes FIXED is provided here.\n\ndf <-read.csv ('example_data/sunflower_data_1.csv')\n\nWe can use the tidyverse package to make ourselves a quick table of ranges to scan.\n\nmin_max <- df %>%\n  #select(all_of(num_vars))%>%\n  select(where(is.numeric)) %>%\n  pivot_longer(cols= everything()) %>%\n  group_by(name) %>%\n  summarize_at('value', list(min = ~ min(.x, na.rm = TRUE), max = ~max (.x, na.rm = TRUE)))\n\n\n\n\n\n\nname\nmin\nmax\n\n\n\n\nharvest_moisture_pct\n5.82\n43.4\n\n\nheight_in\n31.00\n188.0\n\n\nyear\n1978.00\n2022.0\n\n\nyield_lb_acre\n230.00\n3426.0\n\n\n\n\n\nIf you completed module 2 you will recall that the summarytools package also gives us this information (and more!) in the Stats/Values column.\n\nview(dfSummary(df))\n\n\n\n\n\nData Frame Summary\ndf\nDimensions: 2685 x 7\n  Duplicates: 0\n\n\n  \n    \n      Variable\n      Stats / Values\n      Freqs (% of Valid)\n      Graph\n      Missing\n    \n  \n  \n    \n      harvest_date\n[character]\n      1. 1999-10-132. 2006-10-233. 2005-10-254. 1997-09-305. 1993-10-216. 1994-10-127. 2000-10-178. 2004-10-279. 2010-10-2110. 2009-11-16[ 14 others ]\n      113(6.9%)107(6.6%)105(6.4%)99(6.1%)98(6.0%)98(6.0%)90(5.5%)80(4.9%)76(4.7%)73(4.5%)692(42.4%)\n      \n      1054\n(39.3%)\n    \n    \n      harvest_moisture_pct\n[numeric]\n      Mean (sd) : 14.3 (6.1)min ≤ med ≤ max:5.8 ≤ 11.8 ≤ 43.4IQR (CV) : 7.9 (0.4)\n      413 distinct values\n      \n      656\n(24.4%)\n    \n    \n      height_in\n[numeric]\n      Mean (sd) : 62.2 (19.6)min ≤ med ≤ max:31 ≤ 60 ≤ 188IQR (CV) : 10 (0.3)\n      376 distinct values\n      \n      398\n(14.8%)\n    \n    \n      yield_lb_acre\n[numeric]\n      Mean (sd) : 1954.6 (497.5)min ≤ med ≤ max:230 ≤ 2001 ≤ 3426IQR (CV) : 641.1 (0.3)\n      1635 distinct values\n      \n      73\n(2.7%)\n    \n    \n      year\n[integer]\n      Mean (sd) : 1999.5 (11.4)min ≤ med ≤ max:1978 ≤ 1999 ≤ 2022IQR (CV) : 17 (0)\n      40 distinct values\n      \n      0\n(0.0%)\n    \n    \n      hybrid\n[character]\n      1. 8942. Falcon3. SF1874. 1415. Badger DMR6. 8D3107. Hornet8. SF2709. 3845 HO10. 432 E[ 1757 others ]\n      27(1.0%)12(0.4%)10(0.4%)9(0.3%)9(0.3%)8(0.3%)8(0.3%)8(0.3%)7(0.3%)7(0.3%)2580(96.1%)\n      \n      0\n(0.0%)\n    \n    \n      planting_date\n[character]\n      1. 1999-06-012. 2006-06-013. 1997-05-294. 1993-05-265. 1994-05-256. 2000-06-027. 2004-05-268. 2010-05-209. 2009-05-2710. 1991-05-28[ 49 others ]\n      113(7.2%)107(6.9%)99(6.3%)98(6.3%)98(6.3%)90(5.8%)80(5.1%)76(4.9%)73(4.7%)72(4.6%)656(42.0%)\n      \n      1123\n(41.8%)\n    \n  \n\nGenerated by summarytools 1.0.1 (R version 4.2.2)2023-11-09\n\n\n\nOften a visual assessment is key to figuring out what is wrong. Most biological data are normally or lognormally distributed. What is that suspect lump of data in height_in?\n\ntoo_tall <- df %>%\n  #filter on values >3d greater than the mean\n  filter(height_in > 62.2 + 19.6*3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nharvest_date\nharvest_moisture_pct\nheight_in\nyield_lb_acre\nyear\nhybrid\nplanting_date\n\n\n\n\n2004-10-27\n23.6\n173\n1310\n2004\n894\n2004-05-26\n\n\n2004-10-27\n26.9\n160\n1421\n2004\n9405\n2004-05-26\n\n\n2004-10-27\n24.4\n170\n1597\n2004\n9441\n2004-05-26\n\n\n2004-10-27\n25.2\n157\n1609\n2004\nCL 55-15\n2004-05-26\n\n\n2004-10-27\n22.2\n155\n1687\n2004\nExp 15\n2004-05-26\n\n\n2004-10-27\n24.1\n168\n1603\n2004\nExp T-1\n2004-05-26\n\n\n2004-10-27\n23.4\n165\n1529\n2004\nExp T-2\n2004-05-26\n\n\n2004-10-27\n23.7\n175\n1474\n2004\nExp T-3\n2004-05-26\n\n\n2004-10-27\n21.3\n165\n1594\n2004\nMSR 50\n2004-05-26\n\n\n2004-10-27\n21.2\n188\n2027\n2004\nMSR 51\n2004-05-26\n\n\n\n\n\nAll appear to be from a single year, which is either (a) the tallest year in sunflower history or (b) a coding error. Perhaps the data were recorded in centimeters instead of inches?\n\n#\nnot_too_tall = df %>%\n  anti_join(., too_tall)\n\nJoining with `by = join_by(harvest_date, harvest_moisture_pct, height_in,\nyield_lb_acre, year, hybrid, planting_date)`\n\nmean(not_too_tall$height_in, na.rm = TRUE)\n\n[1] 58.8046\n\nmean(too_tall$height_in, na.rm = TRUE)\n\n[1] 156.1266\n\n#does converting to cm to inches fix the problem?\nmean(too_tall$height_in, na.rm = TRUE)/2.54\n\n[1] 61.46716\n\n\nIt is always best to double check your field notes, your assistants field notes etc to verify your assumptions when correcting data after the fact! But sometimes, the unit errors are pretty easy to detect and erroneous data can be easily corrected after the fact.\n\ntoo_tall = too_tall %>%\n  mutate(height_in = height_in/2.54)\n\ndf = bind_rows(too_tall, not_too_tall)\n\nCarry on and be merry!"
  }
]