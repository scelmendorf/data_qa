---
title: "1. Scrambled data types"
---

This module addresses common errors where string and/or missing data encoded as strings are interwoven with numbers and dates, as well as non-standardized date formatting.

```{r load packages, message=FALSE, warning=FALSE}
library(naniar) # to homogenize missing value codes
library(tidyverse) # general data wrangling
```

```{r create data, include = FALSE}
df <- read.csv("example_data/sunflower_data.csv")

df <- df %>%
  select(
    harvest_date, harvest_moisture_pct, height_in, planting_date,
    yield_lb_acre, Year, Hybrid
  )

# introduce errors
df <- df %>%
  # make heigh in 2004 centimeters
  mutate(height_in = ifelse(Year == 2004, round(2.54 * height_in), height_in))

# make up emergence_date
df <- df %>%
  rowwise() %>%
  mutate(emergence_date = planting_date + round(rlnorm(1, 1.2, 0.5))) %>%
  ungroup()

# drag and fill errors
df$planting_date[df$Year == 1999] <- seq(min(df$planting_date[df$Year == 1999]),
  by = 1,
  length.out = length(df$planting_date[df$Year == 1999])
)

df$height_in <- as.character(df$height_in)
df$height_in[475] <- "N/A"
df$height_in[40] <- "na"
df$height_in[483] <- NA

df$harvest_moisture_pct[df$Year == 2008] <- df$harvest_moisture_pct[df$Year == 2008] / 100

df$planting_date <- as.character(df$planting_date)
df$planting_date[df$Year == 2010] <- "5/20/2010"
df$harvest_date <- as.character(df$harvest_date)

# drop a year
df <- df %>%
  filter(Year != 2003)

write.csv(df, "example_data/sunflower_data_broken.csv")
```

```{r read and explore data}
df <- read.csv("example_data/sunflower_data_broken.csv")
```

To understand a little bit about the data, it can be helpful to get a brief summary of the contents

```{r data exploration}
glimpse(df)
```

A glimpse at our dataset tells us something about its structure. Ideally, you are the data collector and already know all of this. The first column (X) appears to be an index variable. Sometimes this is intentional; more often it occurs when people write out files in R and forget to include the `row.names = F` argument.

**Some things should strike you as potentially problematic about this dataset:**

1.  There are two date fields, but one is encoded as a character and one as an integer.
2.  Height (with units inches) is encoded as a character.

It is very easy to convert everything that *should* be numeric into a numeric field, but doing this blindly risks wiping out actual data. For example - what if all the low values were entered as 'below detection level'. Setting all those values to 'NA' would bias the results. It's important to suss out what those mystery values are, and why they are there in the first place.

There surely is an existing R package that does this more elegantly, but I have yet to discover it. So I wrote a short function that iterates across columns and pulls out all rows of data that cannot successfully be converted to a numeric value. This function (check_non_numeric) is designed to check if a specified column in a dataframe contains non-numeric values. The function takes two arguments: df, which is the dataframe to be checked, and var, which is the name of the column in the dataframe to be checked.

Copy the function below to use in the next set of code.

```{r define customized function to look for non-numeric values in data frame}
# Function to find non-numeric values in a column and inspect

# @param df data frame
# @param var variable to check
# @return data frame with non-numeric values
check_non_numeric <- function(df, var) {
  row_probs <- which(!is.na(df[[var]]) & is.na(suppressWarnings(as.numeric(df[[var]]))))
  if (length(row_probs > 0)) {
    warning(paste("Check file for", var, "\n"))
    return(df[row_probs, ])
  } else {
    cat(paste("all values are numeric for ", var, "\n"))
    return(NULL)
  }
}
```

To inspect our data for possible problems in numeric columns, we need to first define all columns that we think should be numeric. Since the majority of the data appear to be numeric, it's often easier to just define which variables are NOT numeric, and test the remaining set.

```{r define numeric columns}
# define numeric columns as all of those that aren't non-numeric
non_numeric_cols <- "Hybrid"
numeric_cols <- setdiff(names(df), non_numeric_cols)
```

We can now iterate over all the columns we think should contain numeric data and look for problems.

```{r check each column}
# set up a list to put numeric check results into
all_checks <- list()

for (i in numeric_cols) {
  all_checks[[i]] <- check_non_numeric(df, i)
}

# resulting list will just have the things you still need to check
names(all_checks)
```

The function has told use we have some non-numeric values in the variables "height_in" and "planting date". Let's look at what these problems are to determine what to do about them.

```{r view problems, eval = FALSE}
View(all_checks[["height_in"]])
```

```{r display problems, echo = FALSE}
knitr::kable(all_checks[["height_in"]], format = "html")
```

We can see from the above there are two different missing value codes included in the height column. Having confidence in the issues, we can now set those to a proper missing value code. Here I'm going to run on the assumption that these two missing value codes may be found elsewhere, and replace them everywhere using the `replace_with_na_all` function. Note we could have also addressed this by defining multiple missing value codes when we initially read in the data.

```{r replace missing}
# replace non-standard missing value codes
df <- df %>% replace_with_na_all(
  condition =
    ~ .x %in% c("N/A", "na")
)
```

Next, let's inspect the planting date problems.

```{r view problems in planting date, eval = FALSE}
View(all_checks[["planting_date"]])
```

```{r display problems in planting date, echo = FALSE}
knitr::kable(head(all_checks[["planting_date"]], 10), format = "html")
```

It appears that some of the data have dates entered as M/D/YYYY. To determine what to do about this, we need to see all the date formats that can be encountered.

```{r example code to view unique values, eval = FALSE}
unique(sort(df[["planting_date"]], decreasing = TRUE))
```

```{r lets look at unique planting dates, echo = FALSE}
knitr::kable(data.frame(planting_date = sort(unique(df[["planting_date"]]), decreasing = TRUE)[1:10]), format = "html")
```

In this dataset, sometimes the date is encoded as an 8 digit integer YYYYMMDD while others have M/D/YYYY. Based on this information, we can use the lubridate package to interpret the dates entered in either format, and then consolidate into a single, proper date column. You will get some warnings! This is to be expected as we know that the date formatting differs among rows.

```{r fix planting date}
df <- df %>%
  rename(planting_date_original = planting_date) %>%
  mutate(
    yyyymmdd = lubridate::ymd(planting_date_original),
    mdy = lubridate::mdy(planting_date_original),
    planting_date_corrected = coalesce(yyyymmdd, mdy)
  )
```

Always check your work!!

```{r check your work, eval = FALSE}
# always check your work
View(df %>%
  filter(Year %in% c(2008:2012)) %>%
  select(planting_date_original, planting_date_corrected) %>%
  distinct())
```

```{r display fixes to date, echo = FALSE}
knitr::kable(df %>%
  filter(Year %in% c(2008:2012)) %>%
  select(planting_date_original, planting_date_corrected) %>%
  distinct(), format = "html")
```

Finally, we can remove the temporary columns we created, and set all our remaining columns to the correct column types.

```{r final fixes to data types, echo = TRUE}
# re define numeric columns - this time leaving off date
numeric_cols <- c("harvest_moisture_pct", "height_in", "yield_lb_acre")

df <- df %>%
  select(-yyyymmdd, -mdy, -planting_date_original, -X) %>%
  rename(planting_date = planting_date_corrected) %>%
  # while we are at it let's rename everything to lower case as
  # variable capitalization is annoying and hard to remember
  rename_all(tolower) %>%
  # set harvest_date to a date rather than an integer
  mutate(
    harvest_date = lubridate::ymd(harvest_date),
    emergence_date = lubridate::ymd(emergence_date)
  ) %>%
  mutate_at(numeric_cols, as.numeric)

glimpse(df)

write.csv(df, "example_data/sunflower_data_1.csv", row.names = FALSE)
```
