---
title: "Strings (and missing data coded as strings) mixed with numbers and dates"
---

```{r install packages, message=FALSE, warning=FALSE, echo=FALSE, results='hide'}
#install packages
packReq <- c("naniar", # to homogenize missing value codes replace_with_na_all
             "tidyverse",
             "dplyr") 

# Install and load all required packages
lapply(packReq, function(x) {
  print(x)
  if (require(x, character.only = TRUE) == FALSE) {
    install.packages(x)
    library(x, character.only = TRUE)
  }})

```

Load packages

```{r load packages, message=FALSE, warning=FALSE}
library (datacleanr) # for interactive data viz
library(naniar) # to homogenize missing value codes
library (tidyverse) #general data wrangling
library (dplyr) #general data wrangling
```

```{r create data, include = FALSE}
df <-read.csv('example_data/sunflower_data.csv')
df = df %>%
  select(harvest_date, harvest_moisture_pct, height_in, planting_date, 
         yield_lb_acre, Year, Hybrid)

#introduce errors
df = df %>% 
  #make heigh in 2004 centimeters
  mutate(height_in = ifelse(Year == 2004, round(2.54*height_in), height_in))

#drag and fill errors
df$planting_date[df$Year ==2005] <-seq(min(df$planting_date[df$Year ==2005]),by=1,
                                       length.out = length(df$planting_date[df$Year ==2005]))

df$height_in = as.character(df$height_in)
df$height_in[475] = 'N/A'
df$height_in[40] = 'na'
df$height_in[483] = NA

df$harvest_moisture_pct[df$Year ==2008] <-df$harvest_moisture_pct[df$Year ==2008]/100

df$planting_date <-as.character(df$planting_date)
df$planting_date[df$Year == 2010] <-'5/20/2010'
df$harvest_date <-as.character(df$harvest_date)

write.csv(df, 'example_data/sunflower_data_broken.csv')


```

```{r read and explore data}
df <-read.csv ('example_data/sunflower_data_broken.csv')

```

To understand a little bit about the data, it can be helpful to get a brief summary of the contents

```{r data exploration}
dplyr::glimpse(df)

```

A glimpse at our dataset tells us something about its structure. Ideally, you are the data collector and already know all of this. The first column (X) appears to be an index variable. Sometimes this is intentional; more often it occurs when people write out files in R and forget to include the `row.names = F` argument. Some things should strike you as potentially problematic about this dataset:

1.  There are two date fields, but one is encoded as a character and one as an integer.
2.  Height (with units inches) is encoded as a character.

It is very easy to convert everything that *should* be numeric into a numeric field, but at the risk of wiping out actual data. Better is to suss out what those mystery values are, and why they are there in the first place.

```{r define numeric columns}
source('functions/functions.R')
#define numeric columns
non_numeric_cols <-'Hybrid'
numeric_cols <- setdiff(names(df), non_numeric_cols)

#set up a list to put numeric check results into
all_checks <- list()

for (i in numeric_cols) {
  all_checks[[i]] <- check_non_numeric(df, i)
}

# resulting list will just have the things you still need to check
names(all_checks)

```

```{r view problems, eval = FALSE}
View(all_checks[["height_in"]])
```

```{r display problems, echo = FALSE}
knitr::kable(all_checks[["height_in"]], format = "html")

```

We can see from the above there are two different missing value codes included in the height column. Having confidence in the issues, we can now set those to a proper missing value code. Here I'm going to run on the assumption that these two missing value codes may be found elsewhere, and replace them everywhere

```{r replace missing}
#replace non-standard missing value codes
df <- df %>% replace_with_na_all(
  condition =
    ~ .x %in% c("N/A", "na")
)

```

```{r what else is wrong missing}
# resulting list will just have the things you still need to check
names(all_checks)

```

```{r view problems in planting date, eval = FALSE}
View(all_checks[["planting_date"]])
```

```{r display problems in planting date, echo = FALSE}
knitr::kable(all_checks[["planting_date"]], format = "html")

```

It appears that some of the data have dates encoded as an 8 digit integer YYYYMMDD while others have M/D/YYYY. With this information, we can standardize the dates two ways, and then consolidate into a single, proper date column

```{r fix planting date}
df <- df %>%
  rename(planting_date_original = planting_date) %>%
  mutate(yyyymmdd= lubridate::ymd(planting_date_original),
         mdy = lubridate::mdy(planting_date_original),
         planting_date_corrected = coalesce(yyyymmdd, mdy))

#always check your work
sanity_test <- df %>% 
  filter(Year %in% c(2008:2012)) %>%
  select(planting_date_original, planting_date_corrected) %>%
  distinct()

```

Always check your work!!

```{r display fixes to date, echo = FALSE}
knitr::kable(sanity_test, format = "html")

```

Finally, we can remove the temporary columns we created, and set all our remaining columns to the correct column types

```{r final fixes to data types, echo = FALSE}
#re define numeric columns - this time leaving off date
numeric_cols <- c("harvest_moisture_pct","height_in" ,"yield_lb_acre")      

df <- df %>%
  select(-yyyymmdd, -mdy, -planting_date_original) %>%
  rename(planting_date = planting_date_corrected) %>%
         #while we are at it let's rename everything to lower case as 
         #variable capitalization is annoying and hard to remember
         rename_all(tolower)%>%
  #set harvest_date to a date rather than an integer
  mutate(harvest_date = lubridate::ymd(harvest_date)) %>%
  mutate_at(numeric_cols, as.numeric)

tibble::glimpse(df)

write.csv(df, 'example_data/sunflower_data_1.csv')
```

To explore our data, we will first use the [datacleanr](https://github.com/the-Hull/datacleanr) package. This is an interactive tool that launches a shiny website for exploring your data. More in depth tutorials can be found using the author's link above.

The `dcr_app()` command launches the interactive app.

```{r data cleanr}
#dcr_app(df)
```

```{r making missing value codes consistent}
# nas can read in multiple ways with vs without quotes
# sarah add some examples of these here
df <- df %>% replace_with_na_all(
  condition =
    ~ .x %in% c("NA", "na", "--", "-", '\\')
)
```

Launch `datacleanr`'s interactive app with `dcr_app()`. The following examples demonstrate basic use and highlight features across the four app tabs.
